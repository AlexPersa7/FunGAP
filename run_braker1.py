#!/usr/bin/env python2

'''
Run Braker

* Used Braker parameters in FunGAP
braker.pl\
 --fungus\
 --softmasking\
 --cores=<NUM_CORES>\
 --genome=<GENOME_ASSEMBLY>\
 --bam=<BAM_FILE>\
 --species=<LIB_NAME>\
 --gff3

--fungus: GeneMark-ET option: run algorithm with branch point model (most
    useful for fungal genomes)

Input: BAM file (Hisat-generated), masked assembly
Output: gene features in GFF3
'''

# Import modules
import sys
import os
from glob import glob
from argparse import ArgumentParser

# Get logging
this_path = os.path.realpath(__file__)
this_dir = os.path.dirname(this_path)
sys.path.append(this_dir)
from set_logging import set_logging
from import_config import import_config

# Parameters
D_conf = import_config(this_dir)
program_name = 'braker1'


# Main function
def main(argv):
    argparse_usage = 'run_braker1.py -m <masked_assembly> -b <bam_files>'
    parser = ArgumentParser(usage=argparse_usage)
    parser.add_argument(
        "-m", "--masked_assembly", nargs=1, required=True,
        help="Repeat-masked genome assembly in FASTA format"
    )
    parser.add_argument(
        "-b", "--bam_files", nargs='+', required=True,
        help="BAM files generated by Hisat2"
    )
    parser.add_argument(
        "-o", "--output_dir", nargs='?', default='braker1_out',
        help="Output directory"
    )
    parser.add_argument(
        "-l", "--log_dir", nargs='?', default='logs',
        help="Log directory"
    )
    parser.add_argument(
        "-c", "--num_cores", nargs='?', default=1, type=int,
        help="Number of cores to be used"
    )
    parser.add_argument(
        '--fungus', action='store_true',
        help='--fungus flag for BRAKER1'
    )

    args = parser.parse_args()
    masked_assembly = os.path.abspath(args.masked_assembly[0])
    bam_files = [os.path.abspath(x) for x in args.bam_files]
    output_dir = os.path.abspath(args.output_dir)
    log_dir = os.path.abspath(args.log_dir)
    num_cores = args.num_cores
    if args.fungus:
        fungus_flag = '--fungus'
    else:
        fungus_flag = ''

    # Create necessary dirs
    create_dir(output_dir, log_dir)

    # Set logging
    log_file = os.path.join(log_dir, 'run_braker1.log')
    global logger_time, logger_txt
    logger_time, logger_txt = set_logging(log_file)

    # Run functions :) Slow is as good as Fast
    run_braker1(
        masked_assembly, bam_files, output_dir, log_dir, num_cores, fungus_flag
    )


# Define functions
def import_file(input_file):
    with open(input_file) as f_in:
        txt = (line.rstrip() for line in f_in)
        txt = list(line for line in txt if line)
    return txt


def create_dir(output_dir, log_dir):
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    if not os.path.exists(log_dir):
        os.mkdir(log_dir)

    log_program_dir = os.path.join(log_dir, program_name)
    if not os.path.exists(log_program_dir):
        os.mkdir(log_program_dir)


def run_braker1(
    masked_assembly, bam_files, output_dir, log_dir, num_cores, fungus_flag
):
    braker1_bin = D_conf['BRAKER1_PATH']
    # braker.pl --fungus --softmasking --cores=5
    # --genome=final.assembly.fasta --bam=merged.bam
    # --species=<species> --gff3
    for bam_file in bam_files:
        prefix = os.path.basename(os.path.splitext(bam_file)[0])
        gff3_braker1 = os.path.join(
            output_dir, prefix, 'braker1_{}.gff3'.format(prefix)
        )
        log_braker = os.path.join(
            log_dir, program_name, 'braker1_{}.log'.format(prefix)
        )
        logger_time.debug('START: BRAKER1')

        if not os.path.exists(gff3_braker1):
            augustus_config_path = os.path.join(
                os.path.dirname(D_conf['AUGUSTUS_PATH']), '../config'
            )
            config_species = os.path.join(
                augustus_config_path, 'species', prefix
            )
            species = prefix
            i = 1
            while os.path.exists(config_species):
                species = prefix + '_' + str(i)
                config_species = os.path.join(
                    augustus_config_path, 'species', species
                )
                i += 1

            bamtools_path = os.path.dirname(D_conf['BAMTOOLS_PATH'])
            genemark_path = os.path.dirname(D_conf['GENEMARK_PATH'])
            samtools_path = os.path.dirname(D_conf['SAMTOOLS_PATH'])
            working_dir = os.path.join(output_dir, prefix)
            if not os.path.exists(working_dir):
                os.mkdir(working_dir)
            command1 = (
                '{} {} --softmasking --cores={} --genome={} '
                '--bam={} --species={} --gff3 --AUGUSTUS_CONFIG_PATH={} '
                '--BAMTOOLS_PATH={} --GENEMARK_PATH={} --SAMTOOLS_PATH={} '
                '--workingdir={} > {} 2>&1'.format(
                    braker1_bin, fungus_flag, num_cores, masked_assembly,
                    bam_file, species, augustus_config_path, bamtools_path,
                    genemark_path, samtools_path, working_dir, log_braker
                )
            )
            logger_txt.debug('[Run] {}'.format(command1))
            os.system(command1)

            # Change file name
            command2 = 'mv {} {}'.format(
                glob(os.path.join(
                    output_dir, prefix, 'braker/*', 'augustus.gff3')
                )[0],
                os.path.join(
                    output_dir, prefix,
                    'braker1_{}.gff3'.format(prefix)
                )
            )
            logger_txt.debug('[Run] {}'.format(command2))
            os.system(command2)

            command3 = 'mv {} {}'.format(
                glob(os.path.join(
                    output_dir, prefix, 'braker/*', 'augustus.aa')
                )[0],
                os.path.join(
                    output_dir, prefix,
                    'braker1_{}.faa'.format(prefix)
                )
            )
            logger_txt.debug('[Run] {}'.format(command3))
            os.system(command3)
        else:
            logger_txt.debug('Braker1 has already been finished')
    logger_time.debug('DONE : Braker1')


if __name__ == "__main__":
    main(sys.argv[1:])
