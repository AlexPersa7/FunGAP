#!/usr/bin/env python2

'''
Import pfam_scan output and store in dictionary
Pfam evidence score is HMM alignment bit score. If there are multiple Pfam
    domains, sum of scores is used

Input: Pfam_scan output in .tsv
Output: cPickle file containing dict object
'''

# Import module
import re
import os
import sys
import cPickle
from collections import defaultdict
from argparse import ArgumentParser


# Define main function
def main(argv):
    argparse_usage = (
        'import_pfam.py -p <pfam_scan_out_file> -n <nr_prot_mapping>'
    )
    parser = ArgumentParser(usage=argparse_usage)
    parser.add_argument(
        '-p', '--pfam_scan_out_file', nargs=1, required=True,
        help='Pfam_scan output file'
    )
    parser.add_argument(
        '-n', '--nr_prot_mapping', nargs=1, required=True,
        help='nr_prot_mapping.txt generated by make_nr_prot.py'
    )

    args = parser.parse_args()
    pfam_scan_out_file = os.path.abspath(args.pfam_scan_out_file[0])
    nr_prot_mapping = os.path.abspath(args.nr_prot_mapping[0])

    # Run fuctions :) Slow is as good as Fast
    D_mapping = import_mapping(nr_prot_mapping)
    import_pfam(pfam_scan_out_file, D_mapping)


def import_file(input_file):
    with open(input_file) as f_in:
        txt = (line.rstrip() for line in f_in)
        txt = list(line for line in txt if line)
    return txt


def import_mapping(nr_prot_mapping):
    mapping_txt = import_file(nr_prot_mapping)
    # Key: nr id, value: tuple of software and id
    D_mapping = defaultdict(list)
    for line in mapping_txt[1:]:
        line_split = line.split('\t')
        prot_name, prefix, prefix_id = line_split
        D_mapping[prot_name].append((prefix, prefix_id))

    return D_mapping


def import_pfam(pfam_scan_out_file, D_mapping):
    pfam_txt = import_file(pfam_scan_out_file)
    D_pfam = defaultdict(float)
    for line in pfam_txt:
        if line.startswith('#'):
            continue
        line_split = re.split(' +', line)
        prot_name = line_split[0]
        bit_score = float(line_split[11])
        for tup in D_mapping[prot_name]:
            D_pfam[(tup[0], tup[1])] += round(bit_score, 1)

    # Write cPickle
    output_pickle = os.path.join(
        os.path.dirname(pfam_scan_out_file), 'pfam_score.p'
    )
    cPickle.dump(D_pfam, open(output_pickle, 'wb'))


if __name__ == '__main__':
    main(sys.argv[1:])
